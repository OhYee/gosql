// generated by Go Code Generator(https://github.com/OhYee/gcg); DO NOT EDIT

package op

import ()

// Str (a)
func Str(a any) *Operator {
	return &Operator{
		args:     []any{a},
		operator: OperatorStr,
		format:   "(%v)",
	}
}

// Not (NOT a)
func Not(a any) *Operator {
	return &Operator{
		args:     []any{a},
		operator: OperatorNot,
		format:   "(NOT %v)",
	}
}

// Eq for Equal
var Eq = Equal

// Equal (a = b)
func Equal(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorEqual,
		format:   "(%v = %v)",
	}
}

// Ne for NotEqual
var Ne = NotEqual

// NotEqual (a != b)
func NotEqual(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorNotEqual,
		format:   "(%v != %v)",
	}
}

// Lt for LessThan
var Lt = LessThan

// LessThan (a < b)
func LessThan(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorLessThan,
		format:   "(%v < %v)",
	}
}

// Gt for GreaterThan
var Gt = GreaterThan

// GreaterThan (a > b)
func GreaterThan(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorGreaterThan,
		format:   "(%v > %v)",
	}
}

// Ge for GreaterEqual
var Ge = GreaterEqual

// GreaterEqual (a >= b)
func GreaterEqual(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorGreaterEqual,
		format:   "(%v >= %v)",
	}
}

// Le for LessEqual
var Le = LessEqual

// LessEqual (a <= b)
func LessEqual(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorLessEqual,
		format:   "(%v <= %v)",
	}
}

// In (a IN b)
func In(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorIn,
		format:   "(%v IN %v)",
	}
}

// Ni for NotIn
var Ni = NotIn

// NotIn (a NOT IN b)
func NotIn(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorNotIn,
		format:   "(%v NOT IN %v)",
	}
}

// Like (a LIKE b)
func Like(a any, b any) *Operator {
	return &Operator{
		args:     []any{a, b},
		operator: OperatorLike,
		format:   "(%v LIKE %v)",
	}
}

// Between (a BETWEEN b AND c)
func Between(a any, b any, c any) *Operator {
	return &Operator{
		args:     []any{a, b, c},
		operator: OperatorBetween,
		format:   "(%v BETWEEN %v AND %v)",
	}
}
